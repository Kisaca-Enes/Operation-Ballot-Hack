import time
import difflib

EXPECTED_TERMS = [
    "from pwn import *",
    "context.binary",
    "ELF",
    "ROP",
    "puts",
    "GOT",
    "leak",
    "libc",
    "system",
    "/bin/sh",
    "ljust",
    "ROP chain",
    "libc_base",
    "call",
    "symbols['main']",
    "interactive"
]

# Basit bir Kaspersky shellcode "database" örneği (gerçek senaryoda daha kapsamlı olur)
KNOWN_SHELLCODES = [
    b"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80",  # execve /bin/sh
    b"\x90\x90\x90\x90",  # basit NOP sled örneği
]

# ASLR/AV bypass için aranan kelimeler
BYPASS_TERMS = [
    "xor",
    "add rsp",
    "ret2libc",
    "jmp rsp",
    "mprotect",
    "virtualalloc",
    "shellcode polymorphic",
    "obfuscate",
    "encode",
    "decrypt",
]

def check_similarity(code_bytes, known_shellcode):
    seq = difflib.SequenceMatcher(None, code_bytes, known_shellcode)
    return seq.ratio()  # 0-1 arası benzerlik oranı

def exploit_degerlendir(code):
    score = 0
    code_lower = code.lower()
    for term in EXPECTED_TERMS:
        if term.lower() in code_lower:
            score += 1

    percent = int((score / len(EXPECTED_TERMS)) * 100)
    return percent

def check_kaspersky_bypass(code):
    code_bytes = code.encode(errors='ignore')
    for shellcode in KNOWN_SHELLCODES:
        similarity = check_similarity(code_bytes, shellcode)
        if similarity > 0.4:
            return False, similarity
    return True, 0

def check_aslr_bypass(code):
    code_lower = code.lower()
    for term in BYPASS_TERMS:
        if term in code_lower:
            return True
    return False

def main():
    print("=== KGB Exploit Test Terminali ===")
    print("Aşağıya Unicode tabanlı exploitinizi yazın.")
    print("Yazmayı bitirmek için boş bir satır girin.\n")

    lines = []
    while True:
        line = input("> ")
        if line.strip() == "":
            break
        lines.append(line)

    user_code = "\n".join(lines)
    print("\nExploit değerlendirmesi yapılıyor...")
    time.sleep(1)

    percent = exploit_degerlendir(user_code)
    kaspersky_ok, similarity = check_kaspersky_bypass(user_code)
    aslr_ok = check_aslr_bypass(user_code)

    print(f"\nExploit Benzerlik Oranı: %{percent}")

    if not kaspersky_ok:
        print(f"⚠️ Uyarı: Exploitiniz Kaspersky'nin bilinen shellcode örneklerine benzerlik gösteriyor (Benzerlik: %{similarity*100:.1f}).")
        print("Shellcode'u polymorphic, encode veya obfuscate ederek değiştirmeniz gerekiyor!")

    if not aslr_ok:
        print("⚠️ Uyarı: ASLR veya AV bypass teknikleri tespit edilmedi.")
        print("Lütfen XOR, mprotect, ret2libc gibi teknikleri ekleyin.")

    if percent >= 80 and kaspersky_ok and aslr_ok:
        print("\n✅ Tebrikler! Yazdığınız exploit oldukça sağlam görünüyor.")
        print("✅ Hedef sistemde root yetkisi kazandınız!")
        print("💀 Root@kgb:~# ")
        print('flag(rootforhacker090')
    else:
        print("\n❌ Exploit yeterince sağlam değil. Birkaç önemli yapı eksik.")

if __name__ == "__main__":
    main()
